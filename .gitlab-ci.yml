# .gitlab-ci.yml
stages:
  - validation
  - build
  - testing
  - release
  - deploy

variables:
  ANSIBLE_FORCE_COLOR: 'true'
  GIT_SSL_NO_VERIFY: "1"
  ANSIBLE_HOST_KEY_CHECKING: 'false'

syntax-check:
  stage: validation
  image: ubuntu:latest
  before_script:
    - apt-get update -qq
    - apt install --no-install-recommends -y python-minimal software-properties-common git vim iputils-ping mtr dnsutils rsync tree python-pip
    - apt-add-repository ppa:ansible/ansible
    - apt update
    - apt install -y ansible python-markupsafe python-ecdsa libyaml-0-2 python-jinja2 python-yaml python-paramiko python-httplib2 python-crypto sshpass
    - pip install pysphere
    - pip install pyvmomi
  script:
    - 'ansible-playbook -i tests/ansible-docker/hosts tests/test.yml --syntax-check'

build-config-test:
  stage: build
  image: ubuntu:latest
  artifacts:
    when: always
    paths:
      - config/
      - build/
      - state/
  before_script:
    - apt-get update -qq
    - apt install --no-install-recommends -y python-minimal software-properties-common git vim iputils-ping mtr dnsutils rsync tree python-pip
    - apt-add-repository ppa:ansible/ansible
    - apt update
    - apt install -y ansible python-markupsafe python-ecdsa libyaml-0-2 python-jinja2 python-yaml python-paramiko python-httplib2 python-crypto sshpass
    - pip install pysphere
    - pip install pyvmomi
    - ansible --version
  script:
    - 'ansible-playbook -i tests/ansible-docker/hosts tests/test.yml --check --tags build --check --diff'

build-config:
  stage: build
  image: ubuntu:latest
  artifacts:
    when: always
    paths:
      - config/
      - build/
      - state/
  before_script:
    - apt-get update -qq
    - apt install --no-install-recommends -y python-minimal software-properties-common git vim iputils-ping mtr dnsutils rsync tree python-pip
    - apt-add-repository ppa:ansible/ansible
    - apt update
    - apt install -y ansible python-markupsafe python-ecdsa libyaml-0-2 python-jinja2 python-yaml python-paramiko python-httplib2 python-crypto sshpass
    - pip install pysphere
    - pip install pyvmomi
    - ansible --version
  script:
    - 'ansible-playbook -i tests/ansible-docker/hosts tests/test.yml --check --tags build'

testing:
  stage: testing
  image: ubuntu:latest
  artifacts:
    when: always
    paths:
      - config/
      - build/
      - state/
      - tests/
  before_script:
    - apt-get update -qq
    - apt install --no-install-recommends -y python-minimal software-properties-common git vim iputils-ping mtr dnsutils rsync tree python-pip
    - apt-add-repository ppa:ansible/ansible
    - apt update
    - apt install -y ansible python-markupsafe python-ecdsa libyaml-0-2 python-jinja2 python-yaml python-paramiko python-httplib2 python-crypto sshpass
    - pip install pysphere
    - pip install pyvmomi
    - ansible --version
  script:
    - 'ansible-playbook -i tests/ansible-docker/hosts tests/test.yml --tags tests'

build-docker-image:
  stage: release
  image: docker:stable
  services:
  - docker:19.03.1-dind
  artifacts:
    when: always
    paths:
      - tests/
  script:
  - docker info
#  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#  - docker build -t ansible tests/.
#  - docker push $CI_REGISTRY/group/project/image:latest

#docker push:
#  stage: Push to Docker Hub
#  only:
#  - master
#  script:
#  - echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USER" --password-stdin
#  - docker push angristan/riot

deploy:
  stage: deploy
  image: ubuntu:latest
  artifacts:
    when: always
    paths:
      - config/
      - build/
      - state/
      - tests/
  before_script:
    - apt-get update -qq
    - apt install --no-install-recommends -y python-minimal software-properties-common git vim iputils-ping mtr dnsutils rsync tree python-pip
    - apt-add-repository ppa:ansible/ansible
    - apt update
    - apt install -y ansible python-markupsafe python-ecdsa libyaml-0-2 python-jinja2 python-yaml python-paramiko python-httplib2 python-crypto sshpass
    - pip install pysphere
    - pip install pyvmomi
    - ansible --version
  script:
    - ansible-playbook -i tests/ansible-docker/hosts tests/test.yml --tags deploy


#build-config:
#  stage: build
#  image: ubuntu:latest
#  artifacts:
#    when: always
#    paths:
#      - config/
#  before_script:
#    - apt-get update -qq
#    - apt install --no-install-recommends -y python-minimal software-properties-common git vim iputils-ping mtr dnsutils rsync tree python-pip
#    - apt-add-repository ppa:ansible/ansible
#    - apt update
#    - apt install -y ansible python-markupsafe python-ecdsa libyaml-0-2 python-jinja2 python-yaml python-paramiko python-httplib2 python-crypto sshpass
#    - pip install pysphere
#    - pip install pyvmomi
#  script:
#    - 'ansible-playbook -i tests/ansible-docker/hosts tests/test.yml --check --tags build'

#testing:
#  stage: testing
#  image: ubuntu:latest
#  artifacts:
#    when: always
#    paths:
#      - tests/
#  before_script:
#    - apt-get update -qq
#    - apt install --no-install-recommends -y python-minimal software-properties-common git vim iputils-ping mtr dnsutils rsync tree python-pip
#    - apt-add-repository ppa:ansible/ansible
#    - apt update
#    - apt install -y ansible python-markupsafe python-ecdsa libyaml-0-2 python-jinja2 python-yaml python-paramiko python-httplib2 python-crypto sshpass
#    - pip install pysphere
#    - pip install pyvmomi
#  script:
#    - 'ansible-playbook -i tests/ansible-docker/hosts tests/test.yml --check --diff'